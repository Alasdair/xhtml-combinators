module DTD2Combinators.Clash (clash, keywords) where

keywords = [ "data"
           , "newtype"
           , "class"
           , "where"
           , "instance"
           , "type"
           , "module"
           ]

clash = [ "abs"
        , "all"
        , "and"
        , "any"
        , "atan"
        , "break"
        , "ceiling"
        , "chr"
        , "compare"
        , "concat"
        , "concatMap"
        , "const"
        , "cos"
        , "digitToInt"
        , "div"
        , "drop"
        , "dropWhile"
        , "elem"
        , "error"
        , "even"
        , "exp"
        , "filter"
        , "flip"
        , "floor"
        , "foldl"
        , "foldl1"
        , "foldr"
        , "foldr1"
        , "fromInt"
        , "fromInteger"
        , "fst"
        , "gcd"
        , "head"
        , "id"
        , "init"
        , "isAlpha"
        , "isDigit"
        , "isLower"
        , "isSpace"
        , "isUpper"
        , "iterate"
        , "last"
        , "lcm"
        , "length"
        , "lines"
        , "log"
        , "map"
        , "max"
        , "maximum"
        , "min"
        , "minimum"
        , "mod"
        , "not"
        , "notElem"
        , "null"
        , "odd"
        , "or"
        , "ord"
        , "pi"
        , "pred"
        , "putStr"
        , "product"
        , "quot"
        , "rem"
        , "repeat"
        , "replicate"
        , "reverse"
        , "round"
        , "show"
        , "sin"
        , "snd"
        , "sort"
        , "span"
        , "splitAt"
        , "sqrt"
        , "subtract"
        , "succ"
        , "sum"
        , "tail"
        , "take"
        , "takeWhile"
        , "tan"
        , "toLower"
        , "toUpper"
        , "truncate"
        , "undefined"
        , "unlines"
        , "until"
        , "unwords"
        , "words"
        , "zip"
        , "zipWith"
        ] ++ keywords
